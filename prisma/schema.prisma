// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @unique @default(autoincrement())
  uuid      String   @default(uuid()) @db.Uuid
  name      String   @db.VarChar(200)
  username  String   @unique @db.VarChar(100)
  email     String   @unique @db.VarChar(200)
  password  String   @db.VarChar(100)
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Token   Token[]
  Otp     Otp[]
  Store   Store[]
  Address Address[]

  @@map("users")
}

model Token {
  id           Int      @unique @default(autoincrement())
  userId       Int      @map("user_id")
  accessToken  String   @map("access_token")
  refreshToken String   @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("tokens")
}

model Otp {
  id        Int      @unique @default(autoincrement())
  userId    Int      @map("user_id")
  otp       Int
  type      String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("otps")
}

model Store {
  id          Int      @unique @default(autoincrement())
  uuid        String   @default(uuid()) @db.Uuid
  userId      Int      @map("user_id")
  name        String   @db.VarChar(200)
  description String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  User    User      @relation(fields: [userId], references: [id])
  Address Address[]
  Product Product[]

  @@index([userId])
  @@map("stores")
}

model Address {
  id        Int      @unique @default(autoincrement())
  userId    Int?     @map("user_id")
  storeId   Int?     @map("store_id")
  villageId Int      @map("district_id")
  address   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User    User?   @relation(fields: [userId], references: [id])
  Store   Store?  @relation(fields: [storeId], references: [id])
  Village Village @relation(fields: [villageId], references: [id])

  @@index([userId, storeId, villageId])
  @@map("addresses")
}

model Village {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid()) @db.Uuid
  name       String
  districtId Int      @map("district_id")
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  District District  @relation(fields: [districtId], references: [id])
  Address  Address[]

  @@index([districtId])
  @@map("villages")
}

model District {
  id        Int      @unique @default(autoincrement())
  uuid      String   @default(uuid()) @db.Uuid
  cityId    Int      @map("city_id")
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  City    City      @relation(fields: [cityId], references: [id])
  Village Village[]

  @@index([cityId])
  @@map("districts")
}

model City {
  id         Int      @unique @default(autoincrement())
  uuid       String   @unique @default(uuid()) @db.Uuid
  provinceId Int      @map("province_id")
  name       String   @db.VarChar(100)
  type       String   @db.VarChar(100)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  Province Province   @relation(fields: [provinceId], references: [id])
  District District[]

  @@index([provinceId])
  @@map("cities")
}

model Province {
  id        Int      @unique @default(autoincrement())
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  City City[]

  @@map("provinces")
}

model Product {
  id          Int      @unique @default(autoincrement())
  storeId     Int      @map("store_id")
  name        String
  quantity    Int
  description String   @db.Text
  SKU         String
  price       Float    @db.DoublePrecision
  discount       Float    @db.DoublePrecision
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Store           Store             @relation(fields: [storeId], references: [id])
  ProductPhoto    ProductPhoto[]
  ProductCategory ProductCategory[]

  @@map("products")
}

model ProductCategory {
  id         Int      @unique @default(autoincrement())
  productId  Int      @map("product_id")
  categoryId Int      @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  Product  Product  @relation(fields: [productId], references: [id])
  Category Category @relation(fields: [categoryId], references: [id])

  @@map("product_categories")
}

model Category {
  id              Int               @unique @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  ProductCategory ProductCategory[]

  @@map("categories")
}

model ProductPhoto {
  id        Int      @unique @default(autoincrement())
  productId Int      @map("product_id")
  photoUrl  String   @map("photo_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Product Product @relation(fields: [productId], references: [id])

  @@map("product_photos")
}

enum Role {
  ADMIN
  USER
}
